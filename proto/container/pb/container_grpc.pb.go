// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.20.3
// source: proto/container/container.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ContainerService_RunContainer_FullMethodName        = "/container.ContainerService/RunContainer"
	ContainerService_StopContainer_FullMethodName       = "/container.ContainerService/StopContainer"
	ContainerService_GetContainerStatus_FullMethodName  = "/container.ContainerService/GetContainerStatus"
	ContainerService_StreamUsage_FullMethodName         = "/container.ContainerService/StreamUsage"
	ContainerService_StreamContainerLogs_FullMethodName = "/container.ContainerService/StreamContainerLogs"
)

// ContainerServiceClient is the client API for ContainerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ContainerServiceClient interface {
	RunContainer(ctx context.Context, in *RunContainerRequest, opts ...grpc.CallOption) (*RunContainerResponse, error)
	StopContainer(ctx context.Context, in *StopContainerRequest, opts ...grpc.CallOption) (*StopContainerResponse, error)
	GetContainerStatus(ctx context.Context, in *GetContainerStatusRequest, opts ...grpc.CallOption) (*GetContainerStatusResponse, error)
	StreamUsage(ctx context.Context, in *UsageRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[UsageResponse], error)
	StreamContainerLogs(ctx context.Context, in *StreamContainerLogsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamContainerLogsResponse], error)
}

type containerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewContainerServiceClient(cc grpc.ClientConnInterface) ContainerServiceClient {
	return &containerServiceClient{cc}
}

func (c *containerServiceClient) RunContainer(ctx context.Context, in *RunContainerRequest, opts ...grpc.CallOption) (*RunContainerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RunContainerResponse)
	err := c.cc.Invoke(ctx, ContainerService_RunContainer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containerServiceClient) StopContainer(ctx context.Context, in *StopContainerRequest, opts ...grpc.CallOption) (*StopContainerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StopContainerResponse)
	err := c.cc.Invoke(ctx, ContainerService_StopContainer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containerServiceClient) GetContainerStatus(ctx context.Context, in *GetContainerStatusRequest, opts ...grpc.CallOption) (*GetContainerStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetContainerStatusResponse)
	err := c.cc.Invoke(ctx, ContainerService_GetContainerStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containerServiceClient) StreamUsage(ctx context.Context, in *UsageRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[UsageResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ContainerService_ServiceDesc.Streams[0], ContainerService_StreamUsage_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[UsageRequest, UsageResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ContainerService_StreamUsageClient = grpc.ServerStreamingClient[UsageResponse]

func (c *containerServiceClient) StreamContainerLogs(ctx context.Context, in *StreamContainerLogsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamContainerLogsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ContainerService_ServiceDesc.Streams[1], ContainerService_StreamContainerLogs_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamContainerLogsRequest, StreamContainerLogsResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ContainerService_StreamContainerLogsClient = grpc.ServerStreamingClient[StreamContainerLogsResponse]

// ContainerServiceServer is the server API for ContainerService service.
// All implementations must embed UnimplementedContainerServiceServer
// for forward compatibility.
type ContainerServiceServer interface {
	RunContainer(context.Context, *RunContainerRequest) (*RunContainerResponse, error)
	StopContainer(context.Context, *StopContainerRequest) (*StopContainerResponse, error)
	GetContainerStatus(context.Context, *GetContainerStatusRequest) (*GetContainerStatusResponse, error)
	StreamUsage(*UsageRequest, grpc.ServerStreamingServer[UsageResponse]) error
	StreamContainerLogs(*StreamContainerLogsRequest, grpc.ServerStreamingServer[StreamContainerLogsResponse]) error
	mustEmbedUnimplementedContainerServiceServer()
}

// UnimplementedContainerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedContainerServiceServer struct{}

func (UnimplementedContainerServiceServer) RunContainer(context.Context, *RunContainerRequest) (*RunContainerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunContainer not implemented")
}
func (UnimplementedContainerServiceServer) StopContainer(context.Context, *StopContainerRequest) (*StopContainerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopContainer not implemented")
}
func (UnimplementedContainerServiceServer) GetContainerStatus(context.Context, *GetContainerStatusRequest) (*GetContainerStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContainerStatus not implemented")
}
func (UnimplementedContainerServiceServer) StreamUsage(*UsageRequest, grpc.ServerStreamingServer[UsageResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamUsage not implemented")
}
func (UnimplementedContainerServiceServer) StreamContainerLogs(*StreamContainerLogsRequest, grpc.ServerStreamingServer[StreamContainerLogsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamContainerLogs not implemented")
}
func (UnimplementedContainerServiceServer) mustEmbedUnimplementedContainerServiceServer() {}
func (UnimplementedContainerServiceServer) testEmbeddedByValue()                          {}

// UnsafeContainerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ContainerServiceServer will
// result in compilation errors.
type UnsafeContainerServiceServer interface {
	mustEmbedUnimplementedContainerServiceServer()
}

func RegisterContainerServiceServer(s grpc.ServiceRegistrar, srv ContainerServiceServer) {
	// If the following call pancis, it indicates UnimplementedContainerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ContainerService_ServiceDesc, srv)
}

func _ContainerService_RunContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerServiceServer).RunContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContainerService_RunContainer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerServiceServer).RunContainer(ctx, req.(*RunContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContainerService_StopContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerServiceServer).StopContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContainerService_StopContainer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerServiceServer).StopContainer(ctx, req.(*StopContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContainerService_GetContainerStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContainerStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerServiceServer).GetContainerStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContainerService_GetContainerStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerServiceServer).GetContainerStatus(ctx, req.(*GetContainerStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContainerService_StreamUsage_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UsageRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ContainerServiceServer).StreamUsage(m, &grpc.GenericServerStream[UsageRequest, UsageResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ContainerService_StreamUsageServer = grpc.ServerStreamingServer[UsageResponse]

func _ContainerService_StreamContainerLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamContainerLogsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ContainerServiceServer).StreamContainerLogs(m, &grpc.GenericServerStream[StreamContainerLogsRequest, StreamContainerLogsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ContainerService_StreamContainerLogsServer = grpc.ServerStreamingServer[StreamContainerLogsResponse]

// ContainerService_ServiceDesc is the grpc.ServiceDesc for ContainerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ContainerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "container.ContainerService",
	HandlerType: (*ContainerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RunContainer",
			Handler:    _ContainerService_RunContainer_Handler,
		},
		{
			MethodName: "StopContainer",
			Handler:    _ContainerService_StopContainer_Handler,
		},
		{
			MethodName: "GetContainerStatus",
			Handler:    _ContainerService_GetContainerStatus_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamUsage",
			Handler:       _ContainerService_StreamUsage_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamContainerLogs",
			Handler:       _ContainerService_StreamContainerLogs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/container/container.proto",
}
